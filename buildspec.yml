version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - echo "Installing Terraform and Ansible..."
      - yum install -y unzip wget awscli ansible
      - wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
      - unzip terraform_1.5.7_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - terraform --version
      - ansible --version

  pre_build:
    commands:
      - echo "Downloading terraform.tfvars from S3..."
      - aws s3 cp s3://splunk-deployment-test/terraform.tfvars terraform.tfvars
      - echo "Extracting build_mode from terraform.tfvars..."
      - export BUILD_MODE=$(grep 'build_mode' terraform.tfvars | awk -F'=' '{print $2}' | tr -d ' "')
      - echo "Selected Build Mode: $BUILD_MODE"

  build:
    commands:
      - echo "Executing Build Mode: $BUILD_MODE"
      - >
        if [ "$BUILD_MODE" == "ec2_only" ]; then
          echo "==== Running EC2 Only Deployment ====";
          cd ec2_only;
          chmod +x scripts/check_key.sh;
          terraform init;
          terraform apply -auto-approve;

        elif [ "$BUILD_MODE" == "splunk_install" ]; then
          echo "==== Running EC2 Splunk Deployment ====";
          cd ec2_splunk;
          chmod +x scripts/check_key.sh;
          terraform init;
          terraform apply -auto-approve;

        elif [ "$BUILD_MODE" == "splunk_ansible" ]; then
          echo "==== Running EC2 Splunk + Ansible Deployment ====";
          cd ec2_splunk_ansible;
          chmod +x scripts/check_key.sh;
          terraform init;
          terraform apply -auto-approve;
          echo "Waiting for EC2 SSH to be ready...";
          sleep 60;
          echo "Running Ansible Playbook...";
          ansible-playbook -i inventory.ini botsv3-setup.yml;

        else
          echo "Invalid build_mode specified in terraform.tfvars!";
          exit 1;
        fi

  post_build:
    commands:
      - echo "Deployment Completed Successfully!"
